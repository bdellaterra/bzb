#!/bin/bash

# Copy files from recursive dependencies
init-deps

# Optionally generate manifest using variables auto-loaded from entry.sh
if [[ -n "$PROJECT_MANIFEST" ]]; then

  # Fail if manifest already exists
  if [[ -e "$PROJECT_MANIFEST" ]]; then
    echo "ERROR: file '$PROJECT_MANIFEST' already exists!" 1>&2
    exit 1
  fi

  echo-file "$HOME/.skeletons/bash/$PROJECT_MANIFEST" > "$PROJECT_MANIFEST"

  # Fail if manifest does not exist or is empty
  if [[ ! "$PROJECT_MANIFEST" ]]; then
    echo "ERROR: file '$PROJECT_MANIFEST' not found or contains no data." 1>&2
    exit 1
  fi

fi

# Setup 'package.json', initializing 'base.package.json' if necessary.
init-package-json

# Setup '.babelrc' if babel configuration is present.
init-json-config .babelrc conf/babel

# Setup '.eslintrc' if eslint configuration is present.
init-json-config .eslintrc conf/eslint

# Setup 'tsconfig.json' if typescript configuration is present.
init-json-config tsconfig.json conf/tsconfig

# Install packages, using 'yarn' if it exists in user's path.
npm=$(which npm)
if [[ ! -x "$npm" ]]; then
    echo "ERROR: Could not find 'npm' executable in path." 1>&2
    exit 3
fi
yarn=$(which yarn 2>/dev/null)
if [[ -x "$yarn" ]] ; then
    yarn
else
    npm install
fi

